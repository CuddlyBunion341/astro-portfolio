---
interface Props {
	tag: string;
	count?: number;
	path?: (tag: string) => string;
	active?: boolean;
}

let { tag, path, count, active } = Astro.props;
path = path ?? ((tag: string) => `/tags/${tag}`);

const baseClasses =
	"text-sm rounded-full py-0.5 px-2 mr-2 my-1 whitespace-nowrap flex items-center";
const variants = {
	enabled: {
		active: `${baseClasses} bg-blue-500 text-white border-blue-500`,
		inactive: `${baseClasses} bg-blue-500 text-white border-blue-800`,
	},
	disabled: {
		active: `${baseClasses} bg-gray-700 text-gray-400 cursor-not-allowed border-blue-500`,
		inactive: `${baseClasses} bg-gray-700 text-gray-400 cursor-not-allowed border-blue-800`,
	},
};

const tagClasses = (disabled: boolean, active: boolean) => {
	const state = disabled ? "disabled" : "enabled";
	const activity = active ? "active" : "inactive";
	return variants[state][activity];
};
---

<a class={tagClasses(count === 0, active ?? true)} href={path(tag)}>
	{tag}
	{
		count !== undefined && count > 0 && (
			<span class="text-xs ml-1">{count}</span>
		)
	}
</a>
